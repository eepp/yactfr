namespace yactfr {

/*!
@defgroup common Common
@brief
    Common API.

@defgroup metadata Metadata
@brief
    Metadata API.

The metadata API includes all the classes, functions, and types related
to <a href="https://diamon.org/ctf/">CTF</a> metadata.

Use the public constructors of the various classes to build
types and eventually get a complete \link TraceType trace
type\endlink which you can then use to build an
\link ElementSequence element sequence\endlink. However, it should
be much more convenient to use fromMetadataText() to
build a trace type from a TSDL (CTF&nbsp;1.8) or JSON text sequence
(CTF&nbsp;2) document.

Use createMetadataStream() to create a metadata stream from
an
<a href="http://en.cppreference.com/w/cpp/io/basic_istream">input stream</a>.
This function takes care of decoding a potentially packetized metadata
stream so that you can \link MetadataStream::text() get its plain
text\endlink.

@defgroup metadata_stream Stream
@brief
    Metadata stream classes.

@ingroup metadata

A metadata stream object contains the plain TSDL (CTF&nbsp;1.8) or JSON
text sequence (CTF&nbsp;2) text. When the stream is packetized, the
object also contains other properties like the native byte order, the
version, the number of packets, and the rest.

Use createMetadataStream() to create a metadata stream from an
<a href="http://en.cppreference.com/w/cpp/io/basic_istream">input stream</a>.
This function takes care of decoding a potentially
packetized metadata stream so that you can \link MetadataStream::text()
get its plain text\endlink.

The result of createMetadataStream() is a MetadataStream object.
Concretely, this object is either a PlainTextMetadatStream object or a
PacketizedMetadataStream object. As there are only two types of metadata
stream objects, you can use <code>dynamic_cast&lt;&gt;()</code> to know
which type is returned.

@defgroup metadata_dt Data types
@brief
    Metadata data type classes and types.

@ingroup metadata

A data type represents a set of possible values found in a data
stream. A data type contains the properties required to decode the
data bits it represents.

In yactfr, all data type objects are unique (wrapped in unique
pointers). This makes it possible to identify any specific data type
within a \link TraceType trace type\endlink hierarchy with its
memory address.

You can build any data type directly with
<code>std::make_unique<>()</code>. Make sure to use the \c const type,
as compound data types only accept this:

@code
auto myIntType = FixedLengthSignedIntegerType::create(
    8, 32, ByteOrder::LITTLE, DisplayBase::HEXADECIMAL, boost::none
);
@endcode

@defgroup item Item
@brief
    %Item API.

A yactfr item is similar to a <a
href="https://www.json.org/json-en.html">JSON</a> value:

<table>
  <tr>
    <th>JSON value
    <th>%Item type
    <th>Creation
  <tr>
    <td>\c null
    <td>
      Item having the ItemKind::NUL kind.
    <td>
      Item::createNull()
  <tr>
    <td>\c true or \c false
    <td>BooleanItem
    <td>
      Constructor or createItem(bool)
  <tr>
    <td>Number
    <td>
      UnsignedIntegerItem, SignedIntegerItem, and RealItem
    <td>
      Constructors or createItem(unsigned long long),
      createItem(long long), and createItem(double)
  <tr>
    <td>String
    <td>
      StringItem
    <td>
      Constructor or createItem(std::string)
  <tr>
    <td>Array
    <td>ArrayItem
    <td>
      Constructor or createItem(ArrayItem::Container&&)
  <tr>
    <td>Object
    <td>MapItem
    <td>
      Constructor or createItem(MapItem::Container&&)
</table>

@defgroup element_seq Element sequence
@brief
    Element sequence API.

An \link ElementSequence element sequence\endlink represents a
sequence of zero or more elements within
<a href="http://diamon.org/ctf/">CTF</a> binary packets.

Iterate the individual elements of an element sequence with
an \link ElementSequenceIterator element sequence iterator\endlink,
created from an element sequence.

An element sequence needs two things on \link
ElementSequence::ElementSequence() %construction\endlink:

- A \link TraceType trace type\endlink.
- A \link DataSourceFactory data source factory\endlink.

You can use fromMetadataText() to build a trace type from a TSDL
(CTF&nbsp;1.8) or JSON text sequence (CTF&nbsp;2) document.

A data source factory is a factory of \link DataSource data
sources\endlink. Each \link ElementSequenceIterator element sequence
iterator\endlink creates its own data source from this shared factory.
For example, the yactfr project provides the MemoryMappedFileViewFactory
data source factory. This one opens a file and keeps its file descriptor
open while its created data sources, memory-mapped file views, create
their own memory maps on this shared file descriptor. This makes it
possible to naturally copy and move an element sequence iterator (using
constructors and assignment operators) without using more file
descriptors and without having to provide a new data source manually.

An element sequence iterator is an
<a href="http://en.cppreference.com/w/cpp/concept/InputIterator">input iterator</a>
with Element as its value type. It's safe to keep a \em copy of an
element, but \em not a reference, when you increment the iterator.

Each element sequence iterator element is a piece of information located
at the \link ElementSequenceIterator::offset()
current offset\endlink of the iterator within the element sequence.

<h3>Expected element sequence element types</h3>

Here's what you can expect when \link ElementSequenceIterator
iterating\endlink an \link ElementSequence element sequence\endlink.

In the following descriptions, consider this language:

<dl>
<dt><code>A B</code></dt>
<dd>
  %Element of type <code>A</code> followed by element of type
  <code>B</code> (two iterations).
</dd>

<dt><code>A | B</code></dt>
<dd>
  %Element of type <code>A</code> <em>or</em> element of type
  <code>B</code> (single iteration).
</dd>

<dt><code>A *</code></dt>
<dd>
  %Element of type <code>A</code> occuring zero or more times (zero or
  more iterations).
</dd>

<dt><code>A ?</code></dt>
<dd>
  %Element of type <code>A</code> occuring zero or one time (zero or one
  iteration).
</dd>

<dt><code>A{n}</code></dt>
<dd>
  %Element of type <code>A</code> occuring \em n times (\em n
  iterations).
</dd>

<dt><code>ScopeBeginningElement&lt;SCOPE&gt;</code></dt>
<dd>
  %Element of type <code>ScopeBeginningElement</code> with specific
  \link #Scope scope\endlink <code>SCOPE</code>.
</dd>

<dt><code>( ... )</code></dt>
<dd>Group of elements of the given types or other groups.</dd>

<dt><code>[ ... ]</code></dt>
<dd>Group of optional elements of the given types or other groups.</dd>
</dl>

When a name is written in <code>UPPERCASE</code>, then it's a named
group of elements having specific types. This is used to make the
descriptions below easier to read and to allow recursion.

<h4><code>DATA</code> group</h4>

<pre>
(
  (
    (
      FixedLengthUnsignedIntegerElement |
      VariableLengthUnsignedIntegerElement |
    )
    [DefaultClockValueElement]
  ) |
  FixedLengthBitArrayElement |
  FixedLengthBooleanElement |
  FixedLengthSignedIntegerElement |
  FixedLengthFloatingPointNumberElement |
  VariableLengthSignedIntegerElement |
  (
    NullTerminatedStringBeginningElement
    RawDataElement *
    NullTerminatedStringEndElement
  ) |
  (
    StaticLengthArrayBeginningElement
    DATA *
    StaticLengthArrayEndElement
  ) |
  (
    DynamicLengthArrayBeginningElement
    DATA *
    DynamicLengthArrayEndElement
  ) |
  (
    StaticLengthStringBeginningElement
    RawDataElement *
    StaticLengthStringEndElement
  ) |
  (
    DynamicLengthStringBeginningElement
    RawDataElement *
    DynamicLengthStringEndElement
  ) |
  (
    StaticLengthBlobBeginningElement
    RawDataElement *
    StaticLengthBlobEndElement
  ) |
  (
    DynamicLengthBlobBeginningElement
    RawDataElement *
    DynamicLengthBlobEndElement
  ) |
  (
    StructureBeginningElement
    DATA *
    StructureEndElement
  ) |
  (
    VariantWithUnsignedIntegerSelectorBeginningElement
    DATA
    VariantWithUnsignedIntegerSelectorEndElement
  ) |
  (
    VariantWithSignedIntegerSelectorBeginningElement
    DATA
    VariantWithSignedIntegerSelectorEndElement
  ) |
  (
    OptionalWithBooleanSelectorBeginningElement
    DATA ?
    OptionalWithBooleanSelectorEndElement
  ) |
  (
    OptionalWithUnsignedIntegerSelectorBeginningElement
    DATA ?
    OptionalWithUnsignedIntegerSelectorEndElement
  ) |
  (
    OptionalWithSignedIntegerSelectorBeginningElement
    DATA ?
    OptionalWithSignedIntegerSelectorEndElement
  )
)
</pre>

<h4><code>EVENT-RECORD</code> group</h4>

<pre>
(
  EventRecordBeginningElement
  [
    ScopeBeginningElement&lt;EVENT_RECORD_HEADER&gt;
    DATA
    ScopeEndElement&lt;EVENT_RECORD_HEADER&gt;
  ]
  EventRecordInfoElement
  [
    ScopeBeginningElement&lt;EVENT_RECORD_COMMON_CONTEXT&gt;
    DATA
    ScopeEndElement&lt;EVENT_RECORD_COMMON_CONTEXT&gt;
  ]
  [
    ScopeBeginningElement&lt;EVENT_RECORD_SPECIFIC_CONTEXT&gt;
    DATA
    ScopeEndElement&lt;EVENT_RECORD_SPECIFIC_CONTEXT&gt;
  ]
  [
    ScopeBeginningElement&lt;EVENT_RECORD_PAYLOAD&gt;
    DATA
    ScopeEndElement&lt;EVENT_RECORD_PAYLOAD&gt;
  ]
  EventRecordEndElement
)
</pre>

<h4><code>PACKET</code> group</h4>

<pre>
(
  PacketBeginningElement PacketContentBeginningElement
  [
    ScopeBeginningElement&lt;PACKET_HEADER&gt;
    StructureBeginningElement
    (
      (
        FixedLengthUnsignedIntegerElement
        PacketMagicNumberElement
      ) |
      (
        StaticLengthArrayBeginningElement
        FixedLengthUnsignedIntegerElement{16}
        MetadataStreamUuidElement
        StaticLengthArrayEndElement
      ) |
      (
        StaticLengthBlobBeginningElement
        RawDataElement *
        MetadataStreamUuidElement
        StaticLengthBlobEndElement
      ) |
      DATA
    ) *
    StructureEndElement
    ScopeEndElement&lt;PACKET_HEADER&gt;
  ]
  DataStreamInfoElement
  [
    ScopeBeginningElement&lt;PACKET_CONTEXT&gt;
    DATA
    ScopeEndElement&lt;PACKET_CONTEXT&gt;
  ]
  PacketInfoElement EVENT-RECORD * PacketContentEndElement PacketEndElement
)
</pre>

<h4>Element sequence</h4>

The whole element sequence is just a sequence of zero or more packets:

<pre>
PACKET *
</pre>

<h3>Padding exclusion</h3>

yactfr's purpose is to extract \em data from data stream files.
Considering this, an element sequence iterator doesn't provide padding
data. In other words, yactfr always skips padding bits so that the
following datum is aligned according to its metadata.

The guarantees of ElementSequenceIterator::offset() are as follows, when
the current element of the iterator is an instance of:

<dl>
  <dt>PacketBeginningElement</dt>
  <dd>
    The offset is the beginning of a packet, \em excluding any prior
    padding following the previous packet content.
  </dd>

  <dt>PacketEndElement</dt>
  <dd>
    The offset is the end of the packet, that is, following any padding
    following its content (the difference between the offset of this
    element and the offset at the prior PacketContentEndElement). It's
    the same as it will be at the next PacketBeginningElement.
  </dd>

  <dt>PacketContentBeginningElement</dt>
  <dd>
    The offset is the same as it was at the last PacketBeginningElement.
  </dd>

  <dt>PacketContentEndElement</dt>
  <dd>
    The offset is the same as it was at the last ScopeEndElement.
  </dd>

  <dt>EventRecordBeginningElement</dt>
  <dd>
    The offset is the same as it will be at the next
    ScopeBeginningElement.
  </dd>

  <dt>EventRecordEndElement</dt>
  <dd>
    The offset is the same as it was at the last ScopeEndElement.
  </dd>

  <dt>ScopeBeginningElement</dt>
  <dd>
    The offset is the same as it will be at the next
    StructureBeginningElement.
  </dd>

  <dt>ScopeEndElement</dt>
  <dd>
    The offset is the same as it was at the last StructureEndElement.
  </dd>

  <dt>NullTerminatedStringBeginningElement</dt>
  <dt>StructureBeginningElement</dt>
  <dt>ArrayBeginningElement</dt>
  <dt>NonNullTerminatedStringBeginningElement</dt>
  <dt>BlobBeginningElement</dt>
  <dt>VariantBeginningElement</dt>
  <dt>OptionalBeginningElement</dt>
  <dd>
    The offset is the beginning of the container, that is, it's aligned
    according to the alignment of the container type (with relation to
    the beginning of the packet).
  </dd>

  <dt>Other EndElement</dt>
  <dd>
    If the previous element was an instance of one of:

    * FixedLengthBitArrayElement
    * VariableLengthIntegerElement
    * RawDataElement

    then the offset is the one of the previous element plus its length
    and, possibly, some padding.

    If it was an instance of EndElement, then the offset is the same as
    it was for the previous element.
  </dd>
</dl>

You can obtain the offset and length of a padding region by considering
the kind of the previous element, the offset, and the length. For
example, if a given FixedLengthFloatingPointNumberElement is at offset
64 and its length is 32&nbsp;bits, and the offset of the next element is
128, then there are 64&nbsp;bits of padding between offsets 64 and 128.
As such, if the offset of a PacketContentEndElement is 8,387,154 and the
offset of the corresponding PacketEndElement is 8,388,608, then there's
1454 padding bits between those two offsets.
*/

} // namespace yactfr
